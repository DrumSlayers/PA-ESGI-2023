---
- name: Install Dolibarr ERP on Ubuntu 22.04 VM with Nginx and acme.sh for SSL
  hosts: tag_Name_vm_dolibarr
  become: true
  vars_files:
    - dolibarr-secrets.yml

  tasks:
    - name: Update apt repository
      ansible.builtin.apt:
        update_cache: true

    - name: Install required packages
      ansible.builtin.apt:
        name:
          - nginx
          - socat
          - php8.1-fpm
          - php-mysqli
          - php-mysql
          - php-gd
          - php-xml
          - php-zip
          - php-curl
          - php-mbstring
          - php-intl
          - php-imap
        state: present

    - name: Start and enable required services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        - nginx
        - php8.1-fpm

    - name: Increase PHP timeouts # Without it, dolibarr install script will fail
      block:
        - name: Increase php-fpm script execution timeout
          ansible.builtin.replace:
            path: /etc/php/8.1/fpm/php.ini
            regexp: 'max_execution_time = 30'
            replace: 'max_execution_time = 600' # 10 minutes
        - name: Increase php-fpm www.conf request_terminate_timeout
          ansible.builtin.replace:
            path: /etc/php/8.1/fpm/pool.d/www.conf
            regexp: ';request_terminate_timeout = 0'
            replace: 'request_terminate_timeout = 600' # 10 minutes
          notify: Restart php8.1-fpm

    - name: Ensure Dolibarr directory exists
      ansible.builtin.file:
        path: "{{ dolibarr_install_dir }}"
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Install Dolibarr
      ansible.builtin.unarchive:
        src: https://github.com/Dolibarr/dolibarr/archive/refs/tags/17.0.2.tar.gz
        dest: "{{ dolibarr_install_dir }}"
        creates: "{{ dolibarr_install_dir }}/dolibarr-17.0.2"
        remote_src: true
        owner: www-data
        group: www-data

    - name: Deploy Dolibarr configuration / forced install script
      ansible.builtin.template:
        src: ./dolibarr/install.forced.php.j2
        dest: "{{ dolibarr_install_dir }}/dolibarr-17.0.2/htdocs/install/install.forced.php"
        owner: www-data
        group: www-data
        mode: '0644'

    - name: Configure Nginx for Dolibarr
      block:
        - name: Install Nginx configuration file
          ansible.builtin.template:
            src: ./dolibarr/nginx_dolibarr.conf.j2
            dest: /etc/nginx/sites-available/dolibarr.conf
            mode: '0644'
        - name: Enable Dolibarr Nginx site
          ansible.builtin.file:
            src: /etc/nginx/sites-available/dolibarr.conf
            dest: /etc/nginx/sites-enabled/dolibarr.conf
            state: link
        - name: Remove default Nginx site
          ansible.builtin.file:
            path: /etc/nginx/sites-enabled/default
            state: absent
        - name: Ensure SSL directory exist in /etc/nginx
          ansible.builtin.file:
            path: /etc/nginx/ssl
            state: directory
            owner: root
            group: root
            mode: '0755'
        - name: Register status of dummy ssl certificate
          ansible.builtin.stat:
            path: /etc/nginx/ssl/dummy.cer
          register: dummy_ssl_cert_path
        - name: Create dummy ssl certificate to have a valid nginx configuration
          when: not dummy_ssl_cert_path.stat.exists
          ansible.builtin.command: >
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/dummy.key
             -out /etc/nginx/ssl/dummy.cer -subj "/C=FR/ST=France/L=Paris/O=TransExpress/OU=PLACEHOLDER - TEMPORAIRE/CN={{ domain_name }}"
          args:
            creates:
              /etc/nginx/ssl/dummy.cer
              /etc/nginx/ssl/dummy.key
          notify: Restart Nginx

    - name: Configure SSL cert with acme.sh for Nginx
      block:
        - name: Ensure acme.sh directory exists
          ansible.builtin.file:
            path: "{{ acme_install_dir }}"
            state: directory
            owner: root
            group: root
            mode: '0755'
        - name: Install acme.sh
          ansible.builtin.git:
            repo: https://github.com/acmesh-official/acme.sh.git
            dest: "{{ acme_install_dir }}"
            version: master
        - name: Initialize acme.sh
          ansible.builtin.command:
            cmd: '{{ acme_install_dir }}/acme.sh --install -m {{ acme_email }}'
            chdir: '{{ acme_install_dir }}'
          register: command_output
          changed_when: command_output.rc != 0
        - name: Generate Let's Encrypt certificate for domain
          ansible.builtin.command:
            cmd: '{{ acme_install_dir }}/acme.sh --issue --nginx -d {{ domain_name }} --server letsencrypt --staging'
            chdir: '{{ acme_install_dir }}'
          register: command_output
          changed_when: command_output.rc != 0
        - name: Install SSL certificate
          ansible.builtin.command:
            cmd: >
                  '{{ acme_install_dir }}/acme.sh --install-cert -d {{ domain_name }} --key-file /etc/nginx/ssl/{{ domain_name }}.key
                  --fullchain-file /etc/nginx/ssl/{{ domain_name }}.cer --reloadcmd "service nginx force-reload"'
            chdir: '{{ acme_install_dir }}'
          register: command_output
          changed_when: command_output.rc != 0
          args:
            creates:
              /root/.acme.sh/{{ domain_name }}/{{ domain_name }}.key
              /root/.acme.sh/{{ domain_name }}/{{ domain_name }}.cer
        - name: Replace dummy cert in nginx conf with the new certificate
          ansible.builtin.replace:
            path: /etc/nginx/sites-enabled/dolibarr.conf
            regexp: 'dummy'
            replace: '{{ item.fqdn }}'
          loop: "{{ proxyservers }}"
          notify: Restart Nginx

  handlers:
    - name: Restart Nginx
      ansible.builtin.service:
        name: nginx
        state: restarted
    - name: Restart php8.1-fpm
      ansible.builtin.service:
        name: php8.1-fpm
        state: restarted
